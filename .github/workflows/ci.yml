name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "::error::Code is not formatted with gofmt"
          gofmt -s -l .
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build
      run: |
        CGO_ENABLED=0 GOOS=linux go build \
          -ldflags="-w -s -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${{ github.sha }}" \
          -o portfolio-backend .
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: portfolio-backend
        path: portfolio-backend

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build \
          --build-arg VERSION=${{ github.ref_name }} \
          --build-arg BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
          --build-arg GIT_COMMIT=${{ github.sha }} \
          -t portfolio-backend:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8080:8080 --name test-container portfolio-backend:latest
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container